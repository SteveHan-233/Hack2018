{"remainingRequest":"/Users/timothyqin/ONE/hackathon/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/timothyqin/ONE/hackathon/src/components/Profile.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/timothyqin/ONE/hackathon/src/components/Profile.vue","mtime":1565379804085},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { httpPostOptions } from \"../lib/http\";\nimport MD5 from \"crypto-js/md5\";\n\nlet PLAID_OPTIONS = null;\n\nexport default {\n  name: \"profile\",\n  mounted() {\n    if(this.$store.state.profile.username === \"\")\n      this.$router.push({ path: \"/\" });\n    fetch(\"http://127.0.0.1:8080/bank\", httpGetOptions())\n            .then(res => res.json())\n            .then(response => {\n              PLAID_OPTIONS = response;\n              var self = this;\n              (function($) {\n                var products = response.PLAID_PRODUCTS.split(',');\n                if (products.includes('assets')) {\n                  $('#assets').show();\n                }\n\n                var handler = Plaid.create({\n                  apiVersion: 'v2',\n                  clientName: 'Plaid Quickstart',\n                  env: response.PLAID_ENV,\n                  product: products,\n                  key: response.PLAID_PUBLIC_KEY,\n                  countryCodes: response.PLAID_COUNTRY_CODES.split(','),\n                  // webhook: 'https://your-domain.tld/plaid-webhook',\n                  onSuccess: (public_token, metadata) => {\n                    var model = {\n                      public_token: public_token\n                    };\n                    fetch(\"http://127.0.0.1:8080/bank/get_access_token\", httpPostOptions(model))\n                            .then(res => res.json())\n                            .then((data) => {\n                              var accountModel = {\n                                username: self.$store.state.username,\n                                access_token: data.access_token,\n                                item_id: data.item_id,\n                                primary_key: self.$store.state.username + \"---\" + metadata.institution.name\n                              };\n                              fetch(\"http://127.0.0.1:8080/bank/new\", httpPostOptions(accountModel));\n                              this.$store.dispatch(\"AddBankConnectionAction\", accountModel)\n                              self.getTransactions(data.access_token);\n                            });\n                  },\n                });\n\n                var accessToken = qs('access_token');\n                if (accessToken != null && accessToken != '') {\n                  var model = {\n                    access_token: accessToken\n                  };\n                  fetch(\"http://127.0.0.1:8080/bank/set_access_token\", httpPostOptions(model))\n                          .then(res => res.json())\n                          .then(function(data) {\n                            $('#container').fadeOut('fast', function() {\n                              $('#item_id').text(data.item_id);\n                              $('#access_token').text(accessToken);\n                              $('#intro').hide();\n                              $('#app, #steps').fadeIn('slow');\n                            });\n                          });\n                }\n\n                $('#link-btn').on('click', function(e) {\n                  handler.open();\n                });\n              })(jQuery);\n            });\n  },\n  data() {\n    return {\n      ProfileModel: {\n        username: this.$store.state.profile.username,\n        email: this.$store.state.profile.email,\n        password: this.$store.state.profile.password,\n        phoneNumber: this.$store.state.profile.phoneNumber\n      },\n      BankConnectionModel: {\n        selected: ''\n      }\n    };\n  },\n  methods: {\n    update() {\n      if(this.ProfileModel.username !== \"\" && this.ProfileModel.email.match(\"@\") && this.ProfileModel.password.trim().length >= 6) {\n        if(this.ProfileModel.phoneNumber !== \"\" && this.ProfileModel.phoneNumber.trim().length !== 10) {\n          this.ProfileModel.phoneNumber = \"\";\n        }\n        const model = {\n          user_id: this.$store.state.profile.user_id,\n          username: this.ProfileModel.username,\n          email: this.ProfileModel.email,\n          password: MD5(this.ProfileModel.password).toString(),\n          phoneNumber: this.ProfileModel.phoneNumber\n        };\n        fetch(\"http://127.0.0.1:8080/users/update/\" + this.$store.state.profile.user_id, httpPostOptions(model))\n                .then(res => res.json())\n                .then(response => {\n                  this.updateProfile(model)\n                  alert(\"Successfully updated profile!\")\n                }).catch(error => {\n          alert(\"The username or email has been taken.\")\n        });\n\n      }\n    },\n    updateProfile(model) {\n      this.$store.dispatch('updateProfileAction', model);\n    },\n    getTransactions(access_token) {\n      fetch(\"http://127.0.0.1:8080/bank/transactions/\" + access_token, httpGetOptions())\n              .then(res => res.json())\n              .then(data => {\n                data.transactions.forEach(t => {\n                  const model = {\n                    id: -1,\n                    username: this.$store.state.username,\n                    transaction_date: t.date,\n                    category: t.category,\n                    payee: t.payee,\n                    amount: Number(t.amount),\n                    memo: '',\n                    account: t.account\n                  };\n                  this.$store.dispatch(\"addTransactionAction\", model);\n                });\n              });\n    },\n    setSelected(connection) {\n      this.BankConnectionModel.selected = connection;\n      console.log(connection)\n    },\n    unlink() {\n      console.log(this.BankConnectionModel.selected)\n    }\n  }\n};\n\nfunction qs(key) {\n  key = key.replace(/[*+?^$.\\[\\]{}()|\\\\\\/]/g, \"\\\\$&\"); // escape RegEx meta chars\n  var match = location.search.match(new RegExp(\"[?&]\" + key + \"=([^&]+)(&|$)\"));\n  return match && decodeURIComponent(match[1].replace(/\\+/g, \" \"));\n}\n",{"version":3,"sources":["Profile.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"Profile.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container-1\">\n    <main>\n      <div id=\"container-2\">\n        <h2>My Profile</h2>\n        <div id=\"grid\">\n          <i class=\"fa fa-user\" aria-hidden=\"true\"></i>\n          <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"Username\"\n                  required=\"true\"\n                  v-model=\"ProfileModel.username\"\n          >\n          <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\n          <input\n                  type=\"email\"\n                  class=\"form-control\"\n                  placeholder=\"Email Address\"\n                  v-model=\"ProfileModel.email\"\n          >\n          <i class=\"fa fa-lock\" aria-hidden=\"true\"></i>\n          <input\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  class=\"form-control\"\n                  required=\"true\"\n                  v-model=\"ProfileModel.password\"\n          >\n          <i class=\"fa fa-phone\" aria-hidden=\"true\"></i>\n          <input\n                  type=\"number\"\n                  placeholder=\"Phone Number\"\n                  class=\"form-control\"\n                  v-model=\"ProfileModel.phoneNumber\"\n          >\n        </div>\n        <div id=\"container\" class=\"initial-view\">\n          <span>Unlink selected bank: </span>\n          <select>\n            <option></option>\n            <option v-for=\"connection of this.$store.state.connections\" @click=\"setSelected(connection)\">{{ connection.primary_key.split(\"---\")[1] }}</option>\n          </select>\n          <button class=\"btn btn-md btn-success\" @click=\"unlink()\">Unlink account</button>\n          <br>\n          <button id=\"link-btn\" class=\"button button--is-primary\">Connect with Plaid</button>\n        </div>\n        <button class=\"btn btn-md btn-success float-center\" @click=\"update()\">Update Profile</button>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\n  import { httpPostOptions } from \"../lib/http\";\n  import MD5 from \"crypto-js/md5\";\n\n  let PLAID_OPTIONS = null;\n\n  export default {\n    name: \"profile\",\n    mounted() {\n      if(this.$store.state.profile.username === \"\")\n        this.$router.push({ path: \"/\" });\n      fetch(\"http://127.0.0.1:8080/bank\", httpGetOptions())\n              .then(res => res.json())\n              .then(response => {\n                PLAID_OPTIONS = response;\n                var self = this;\n                (function($) {\n                  var products = response.PLAID_PRODUCTS.split(',');\n                  if (products.includes('assets')) {\n                    $('#assets').show();\n                  }\n\n                  var handler = Plaid.create({\n                    apiVersion: 'v2',\n                    clientName: 'Plaid Quickstart',\n                    env: response.PLAID_ENV,\n                    product: products,\n                    key: response.PLAID_PUBLIC_KEY,\n                    countryCodes: response.PLAID_COUNTRY_CODES.split(','),\n                    // webhook: 'https://your-domain.tld/plaid-webhook',\n                    onSuccess: (public_token, metadata) => {\n                      var model = {\n                        public_token: public_token\n                      };\n                      fetch(\"http://127.0.0.1:8080/bank/get_access_token\", httpPostOptions(model))\n                              .then(res => res.json())\n                              .then((data) => {\n                                var accountModel = {\n                                  username: self.$store.state.username,\n                                  access_token: data.access_token,\n                                  item_id: data.item_id,\n                                  primary_key: self.$store.state.username + \"---\" + metadata.institution.name\n                                };\n                                fetch(\"http://127.0.0.1:8080/bank/new\", httpPostOptions(accountModel));\n                                this.$store.dispatch(\"AddBankConnectionAction\", accountModel)\n                                self.getTransactions(data.access_token);\n                              });\n                    },\n                  });\n\n                  var accessToken = qs('access_token');\n                  if (accessToken != null && accessToken != '') {\n                    var model = {\n                      access_token: accessToken\n                    };\n                    fetch(\"http://127.0.0.1:8080/bank/set_access_token\", httpPostOptions(model))\n                            .then(res => res.json())\n                            .then(function(data) {\n                              $('#container').fadeOut('fast', function() {\n                                $('#item_id').text(data.item_id);\n                                $('#access_token').text(accessToken);\n                                $('#intro').hide();\n                                $('#app, #steps').fadeIn('slow');\n                              });\n                            });\n                  }\n\n                  $('#link-btn').on('click', function(e) {\n                    handler.open();\n                  });\n                })(jQuery);\n              });\n    },\n    data() {\n      return {\n        ProfileModel: {\n          username: this.$store.state.profile.username,\n          email: this.$store.state.profile.email,\n          password: this.$store.state.profile.password,\n          phoneNumber: this.$store.state.profile.phoneNumber\n        },\n        BankConnectionModel: {\n          selected: ''\n        }\n      };\n    },\n    methods: {\n      update() {\n        if(this.ProfileModel.username !== \"\" && this.ProfileModel.email.match(\"@\") && this.ProfileModel.password.trim().length >= 6) {\n          if(this.ProfileModel.phoneNumber !== \"\" && this.ProfileModel.phoneNumber.trim().length !== 10) {\n            this.ProfileModel.phoneNumber = \"\";\n          }\n          const model = {\n            user_id: this.$store.state.profile.user_id,\n            username: this.ProfileModel.username,\n            email: this.ProfileModel.email,\n            password: MD5(this.ProfileModel.password).toString(),\n            phoneNumber: this.ProfileModel.phoneNumber\n          };\n          fetch(\"http://127.0.0.1:8080/users/update/\" + this.$store.state.profile.user_id, httpPostOptions(model))\n                  .then(res => res.json())\n                  .then(response => {\n                    this.updateProfile(model)\n                    alert(\"Successfully updated profile!\")\n                  }).catch(error => {\n            alert(\"The username or email has been taken.\")\n          });\n\n        }\n      },\n      updateProfile(model) {\n        this.$store.dispatch('updateProfileAction', model);\n      },\n      getTransactions(access_token) {\n        fetch(\"http://127.0.0.1:8080/bank/transactions/\" + access_token, httpGetOptions())\n                .then(res => res.json())\n                .then(data => {\n                  data.transactions.forEach(t => {\n                    const model = {\n                      id: -1,\n                      username: this.$store.state.username,\n                      transaction_date: t.date,\n                      category: t.category,\n                      payee: t.payee,\n                      amount: Number(t.amount),\n                      memo: '',\n                      account: t.account\n                    };\n                    this.$store.dispatch(\"addTransactionAction\", model);\n                  });\n                });\n      },\n      setSelected(connection) {\n        this.BankConnectionModel.selected = connection;\n        console.log(connection)\n      },\n      unlink() {\n        console.log(this.BankConnectionModel.selected)\n      }\n    }\n  };\n\n  function qs(key) {\n    key = key.replace(/[*+?^$.\\[\\]{}()|\\\\\\/]/g, \"\\\\$&\"); // escape RegEx meta chars\n    var match = location.search.match(new RegExp(\"[?&]\" + key + \"=([^&]+)(&|$)\"));\n    return match && decodeURIComponent(match[1].replace(/\\+/g, \" \"));\n  }\n</script>\n\n<style scoped>\n  main {\n    background-color: #F7F7FC;\n    display: grid;\n    height: 100vh;\n    align-content: center;\n    align-items: center;\n    padding: 0 15%;\n  }\n  h2 {\n    font-size: 2em;\n    margin-top: 0;\n    margin-bottom: 1em;\n  }\n  #grid {\n    display: grid;\n    grid-template-columns: 3em auto;\n    grid-template-rows: repeat(4, 3em);\n    grid-column-gap: 1em;\n  }\n  i {\n    font-size: 2em;\n    text-align: center;\n  }\n  #signupButton {\n    margin-left: 1%;\n  }\n  .container-1 {\n    display: grid;\n    align-items: center;\n    align-content: center;\n  }\n  #container-2 {\n    background-color: white;\n    padding: 4em;\n    border-radius: 2em;\n    box-shadow: -5px 29px 162px -54px grey;\n  }\n  input {\n    margin-bottom: 1em;\n  }\n  @media only screen and (max-width: 1100px) {\n    main{\n      height: 85vh;\n      border-radius: 1em;\n      margin: 0 5vw;\n      background-color: transparent;\n    }\n  }\n</style>\n"]}]}