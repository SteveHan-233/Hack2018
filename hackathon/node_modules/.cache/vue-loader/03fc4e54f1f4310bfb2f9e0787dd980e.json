{"remainingRequest":"/Users/timothyqin/ONE/hackathon/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/timothyqin/ONE/hackathon/src/components/LineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/timothyqin/ONE/hackathon/src/components/LineChart.vue","mtime":1559340139835},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport LineChart from \"../LineChart.js\";\nimport { transactions } from \"../firebase\";\n\nexport default {\n    name: \"line\",\n    components: {\n        LineChart\n    },\n    data() {\n        return {\n            user: null,\n            chartOptions: {\n                scales: {\n                    xAxes: [{\n                        type: 'time',\n                        distribution: 'linear',\n                        time: {\n                            unit: 'day',\n                            min: this.getFirstDay(),\n                            max: this.getLastDay()\n                        }\n                    }]\n                },\n                maintainAspectRatio:false\n            }\n        };\n    },\n    methods: {\n        getFirstDay() {\n            var date = new Date();\n            var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n            return firstDay;\n        },\n        getLastDay() {\n            var date = new Date();\n            var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDay;\n        },\n        reverseOrder(l) {\n            var reversed = [];\n            for(var i = l.length - 1; i >= 0; i--) {\n                reversed.push(l[i]);\n            }\n            return reversed;\n        }\n    },\n    firebase: {\n        list: transactions.orderByChild(\"date\")\n    },\n    mounted() {\n        this.user = this.$store.username;\n    },\n    computed: {\n        datacollection: function() {\n            if (!this.user) {\n                return null;\n            } else {\n                return {\n                    // labels: this.getDaysOfMonth,\n                    datasets: [\n                        {\n                            label: \"Earnings\",\n                            data: this.earnings,\n                            fill: false,\n                            borderColor: \"#53f442\"\n                            // backgroundColor: \"#53f442\"\n                        },\n                        {\n                            label: \"Spendings\",\n                            data: this.spendings,\n                            fill: false,\n                            borderColor: \"#e82929\"\n                            // backgroundColor: \"#e82929\"\n                        }\n                        ,\n                        {\n                            label: \"Balance\",\n                            data: this.balance,\n                            fill: false,\n                            borderColor: \"#000000\"\n                            // backgroundColor: \"#e82929\"\n                        }\n                    ]\n                };\n            }\n        },\n        earnings: function() {\n            var firstDay = this.getFirstDay();\n            var lastDay = this.getLastDay();\n            var sorted = this.list;\n            var earnings = [];\n            for(var i = 0; i < sorted.length; i++) {\n                if(sorted[i].username === this.user\n                    && new Date(sorted[i].date.toString()) >= firstDay && new Date(sorted[i].date.toString()) <= lastDay\n                    && sorted[i].amount > 0) {\n                    earnings.push({x: new Date(sorted[i].date), y: sorted[i].amount});\n                }\n            }\n            return earnings;\n        },\n        spendings: function() {\n            var firstDay = this.getFirstDay();\n            var lastDay = this.getLastDay();\n            var sorted = this.list;\n            var spendings = [];\n            for(var i = 0; i < sorted.length; i++) {\n                if(sorted[i].username === this.user\n                    && new Date(sorted[i].date) >= firstDay && new Date(sorted[i].date) <= lastDay\n                    && sorted[i].amount < 0) {\n                    spendings.push({x: new Date(sorted[i].date), y: Math.abs(sorted[i].amount)});\n                }\n            }\n            return spendings;\n        },\n        balance: function() {\n            var firstDay = this.getFirstDay();\n            var lastDay = this.getLastDay();\n            var sorted = this.list;\n            var balance = [];\n            var sum = 0;\n            for(var i = 0; i < sorted.length; i++) {\n                if(sorted[i].username === this.user\n                    && new Date(sorted[i].date) >= firstDay && new Date(sorted[i].date) <= lastDay) {\n                    sum += parseFloat(sorted[i].amount);\n                    balance.push({x: new Date(sorted[i].date), y: sum});\n                }\n            }\n            return balance;\n        }\n    }\n};\n",{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"LineChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container-1\">\n    <main>\n      <div id=\"container-2\">\n        <h2>This Month</h2>\n        <div class=\"chart\">\n          <line-chart :width=\"400\" :height=\"350\" id=\"myChart\" :chart-data=\"datacollection\" :options=\"chartOptions\"></line-chart>\n        </div>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\n    import LineChart from \"../LineChart.js\";\n    import { transactions } from \"../firebase\";\n\n    export default {\n        name: \"line\",\n        components: {\n            LineChart\n        },\n        data() {\n            return {\n                user: null,\n                chartOptions: {\n                    scales: {\n                        xAxes: [{\n                            type: 'time',\n                            distribution: 'linear',\n                            time: {\n                                unit: 'day',\n                                min: this.getFirstDay(),\n                                max: this.getLastDay()\n                            }\n                        }]\n                    },\n                    maintainAspectRatio:false\n                }\n            };\n        },\n        methods: {\n            getFirstDay() {\n                var date = new Date();\n                var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n                return firstDay;\n            },\n            getLastDay() {\n                var date = new Date();\n                var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n                return lastDay;\n            },\n            reverseOrder(l) {\n                var reversed = [];\n                for(var i = l.length - 1; i >= 0; i--) {\n                    reversed.push(l[i]);\n                }\n                return reversed;\n            }\n        },\n        firebase: {\n            list: transactions.orderByChild(\"date\")\n        },\n        mounted() {\n            this.user = this.$store.username;\n        },\n        computed: {\n            datacollection: function() {\n                if (!this.user) {\n                    return null;\n                } else {\n                    return {\n                        // labels: this.getDaysOfMonth,\n                        datasets: [\n                            {\n                                label: \"Earnings\",\n                                data: this.earnings,\n                                fill: false,\n                                borderColor: \"#53f442\"\n                                // backgroundColor: \"#53f442\"\n                            },\n                            {\n                                label: \"Spendings\",\n                                data: this.spendings,\n                                fill: false,\n                                borderColor: \"#e82929\"\n                                // backgroundColor: \"#e82929\"\n                            }\n                            ,\n                            {\n                                label: \"Balance\",\n                                data: this.balance,\n                                fill: false,\n                                borderColor: \"#000000\"\n                                // backgroundColor: \"#e82929\"\n                            }\n                        ]\n                    };\n                }\n            },\n            earnings: function() {\n                var firstDay = this.getFirstDay();\n                var lastDay = this.getLastDay();\n                var sorted = this.list;\n                var earnings = [];\n                for(var i = 0; i < sorted.length; i++) {\n                    if(sorted[i].username === this.user\n                        && new Date(sorted[i].date.toString()) >= firstDay && new Date(sorted[i].date.toString()) <= lastDay\n                        && sorted[i].amount > 0) {\n                        earnings.push({x: new Date(sorted[i].date), y: sorted[i].amount});\n                    }\n                }\n                return earnings;\n            },\n            spendings: function() {\n                var firstDay = this.getFirstDay();\n                var lastDay = this.getLastDay();\n                var sorted = this.list;\n                var spendings = [];\n                for(var i = 0; i < sorted.length; i++) {\n                    if(sorted[i].username === this.user\n                        && new Date(sorted[i].date) >= firstDay && new Date(sorted[i].date) <= lastDay\n                        && sorted[i].amount < 0) {\n                        spendings.push({x: new Date(sorted[i].date), y: Math.abs(sorted[i].amount)});\n                    }\n                }\n                return spendings;\n            },\n            balance: function() {\n                var firstDay = this.getFirstDay();\n                var lastDay = this.getLastDay();\n                var sorted = this.list;\n                var balance = [];\n                var sum = 0;\n                for(var i = 0; i < sorted.length; i++) {\n                    if(sorted[i].username === this.user\n                        && new Date(sorted[i].date) >= firstDay && new Date(sorted[i].date) <= lastDay) {\n                        sum += parseFloat(sorted[i].amount);\n                        balance.push({x: new Date(sorted[i].date), y: sum});\n                    }\n                }\n                return balance;\n            }\n        }\n    };\n</script>\n\n<style scoped>\n  main {\n    background-color: #f7f7fc;\n    display: grid;\n    height: 100vh;\n    align-content: center;\n    align-items: center;\n    padding: 0 15%;\n  }\n  h2 {\n    font-size: 2em;\n    margin-top: 0;\n    margin-bottom: 1em;\n  }\n  #signupButton {\n    margin-left: 1%;\n  }\n  .container-1 {\n    display: grid;\n    align-items: center;\n    align-content: center;\n  }\n  #container-2 {\n    background-color: white;\n    height: 85vh;\n    padding: 4em;\n    border-radius: 2em;\n    box-shadow: -5px 29px 162px -54px grey;\n  }\n  @media only screen and (max-width: 1100px) {\n    main {\n      height: 85vh;\n      border-radius: 1em;\n      padding: 0 5%;\n      margin: 0 5vw;\n      background-color: transparent;\n    }\n  }\n</style>"]}]}