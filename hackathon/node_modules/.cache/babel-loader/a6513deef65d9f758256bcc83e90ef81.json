{"remainingRequest":"/Users/timothyqin/ONE/hackathon/node_modules/babel-loader/lib/index.js!/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/timothyqin/ONE/hackathon/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/timothyqin/ONE/hackathon/src/components/Profile.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/timothyqin/ONE/hackathon/src/components/Profile.vue","mtime":1565499315516},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { httpGetOptions, httpPostOptions } from \"../lib/http\";\nimport MD5 from \"crypto-js/md5\";\nvar PLAID_OPTIONS = null;\nexport default {\n  name: \"profile\",\n  mounted: function mounted() {\n    var _this = this;\n\n    if (this.$store.state.profile.username === \"\") this.$router.push({\n      path: \"/\"\n    });\n    fetch(\"http://127.0.0.1:8080/bank\", httpGetOptions()).then(function (res) {\n      return res.json();\n    }).then(function (response) {\n      PLAID_OPTIONS = response;\n      var self = _this;\n\n      (function ($) {\n        var products = response.PLAID_PRODUCTS.split(',');\n\n        if (products.includes('assets')) {\n          $('#assets').show();\n        }\n\n        var handler = Plaid.create({\n          apiVersion: 'v2',\n          clientName: 'Plaid Quickstart',\n          env: response.PLAID_ENV,\n          product: products,\n          key: response.PLAID_PUBLIC_KEY,\n          countryCodes: response.PLAID_COUNTRY_CODES.split(','),\n          // webhook: 'https://your-domain.tld/plaid-webhook',\n          onSuccess: function onSuccess(public_token, metadata) {\n            var model = {\n              public_token: public_token\n            };\n            fetch(\"http://127.0.0.1:8080/bank/token/get_access_token\", httpPostOptions(model)).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              var accountModel = {\n                user_id: self.$store.state.profile.user_id,\n                access_token: data.access_token,\n                item_id: data.item_id,\n                primary_key: self.$store.state.profile.username + \"---\" + metadata.institution.name\n              };\n              fetch(\"http://127.0.0.1:8080/bank/new\", httpPostOptions(accountModel));\n              self.$store.dispatch(\"AddBankConnectionAction\", accountModel);\n              self.getTransactions(data.access_token);\n            });\n          }\n        });\n        var accessToken = qs('access_token');\n\n        if (accessToken != null && accessToken != '') {\n          var model = {\n            access_token: accessToken\n          };\n          fetch(\"http://127.0.0.1:8080/bank/token/set_access_token\", httpPostOptions(model)).then(function (res) {\n            return res.json();\n          }).then(function (data) {\n            $('#container').fadeOut('fast', function () {\n              $('#item_id').text(data.item_id);\n              $('#access_token').text(accessToken);\n              $('#intro').hide();\n              $('#app, #steps').fadeIn('slow');\n            });\n          });\n        }\n\n        $('#link-btn').on('click', function (e) {\n          handler.open();\n        });\n      })(jQuery);\n    });\n  },\n  data: function data() {\n    return {\n      ProfileModel: {\n        username: this.$store.state.profile.username,\n        email: this.$store.state.profile.email,\n        password: this.$store.state.profile.password,\n        phoneNumber: this.$store.state.profile.phoneNumber\n      },\n      BankConnectionModel: {\n        selected: ''\n      }\n    };\n  },\n  methods: {\n    update: function update() {\n      var _this2 = this;\n\n      if (this.ProfileModel.username !== \"\" && this.ProfileModel.email.match(\"@\") && this.ProfileModel.password.trim().length >= 6) {\n        if (this.ProfileModel.phoneNumber !== \"\" && this.ProfileModel.phoneNumber.trim().length !== 10) {\n          this.ProfileModel.phoneNumber = \"\";\n        }\n\n        var model = {\n          user_id: this.$store.state.profile.user_id,\n          username: this.ProfileModel.username,\n          email: this.ProfileModel.email,\n          password: MD5(this.ProfileModel.password).toString(),\n          phoneNumber: this.ProfileModel.phoneNumber\n        };\n        fetch(\"http://127.0.0.1:8080/users/update/\" + this.$store.state.profile.user_id, httpPostOptions(model)).then(function (res) {\n          return res.json();\n        }).then(function (response) {\n          _this2.updateProfile(model);\n\n          alert(\"Successfully updated profile!\");\n        }).catch(function (error) {\n          alert(\"The username or email has been taken.\");\n        });\n      }\n    },\n    updateProfile: function updateProfile(model) {\n      this.$store.dispatch('updateProfileAction', model);\n    },\n    getTransactions: function getTransactions(access_token) {\n      var _this3 = this;\n\n      fetch(\"http://127.0.0.1:8080/bank\" + this.$store.state.profile.user_id + \"/transactions/\" + access_token, httpGetOptions()).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        data.transactions.forEach(function (t) {\n          var model = {\n            id: -1,\n            username: _this3.$store.state.profile.username,\n            transaction_date: t.date,\n            category: t.category,\n            payee: t.payee,\n            amount: Number(t.amount),\n            memo: '',\n            account: t.account\n          };\n\n          _this3.$store.dispatch(\"addTransactionAction\", model);\n        });\n      });\n    },\n    setSelected: function setSelected(connection) {\n      this.BankConnectionModel.selected = connection;\n      console.log(connection);\n    },\n    unlink: function unlink() {\n      console.log(this.BankConnectionModel.selected);\n    }\n  }\n};\n\nfunction qs(key) {\n  key = key.replace(/[*+?^$.\\[\\]{}()|\\\\\\/]/g, \"\\\\$&\"); // escape RegEx meta chars\n\n  var match = location.search.match(new RegExp(\"[?&]\" + key + \"=([^&]+)(&|$)\"));\n  return match && decodeURIComponent(match[1].replace(/\\+/g, \" \"));\n}",{"version":3,"sources":["Profile.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container-1\">\n    <main>\n      <div id=\"container-2\">\n        <h2>My Profile</h2>\n        <div id=\"grid\">\n          <i class=\"fa fa-user\" aria-hidden=\"true\"></i>\n          <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"Username\"\n                  required=\"true\"\n                  v-model=\"ProfileModel.username\"\n          >\n          <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\n          <input\n                  type=\"email\"\n                  class=\"form-control\"\n                  placeholder=\"Email Address\"\n                  v-model=\"ProfileModel.email\"\n          >\n          <i class=\"fa fa-lock\" aria-hidden=\"true\"></i>\n          <input\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  class=\"form-control\"\n                  required=\"true\"\n                  v-model=\"ProfileModel.password\"\n          >\n          <i class=\"fa fa-phone\" aria-hidden=\"true\"></i>\n          <input\n                  type=\"number\"\n                  placeholder=\"Phone Number\"\n                  class=\"form-control\"\n                  v-model=\"ProfileModel.phoneNumber\"\n          >\n        </div>\n        <div id=\"container\" class=\"initial-view\">\n          <span>Unlink selected bank: </span>\n          <select>\n            <option></option>\n            <option v-for=\"connection of this.$store.state.connections\" @click=\"setSelected(connection)\">{{ connection.primary_key.split(\"---\")[1] }}</option>\n          </select>\n          <button class=\"btn btn-md btn-success\" @click=\"unlink()\">Unlink account</button>\n          <br>\n          <button id=\"link-btn\" class=\"button button--is-primary\">Connect with Plaid</button>\n        </div>\n        <button class=\"btn btn-md btn-success float-center\" @click=\"update()\">Update Profile</button>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\n  import { httpGetOptions, httpPostOptions } from \"../lib/http\";\n  import MD5 from \"crypto-js/md5\";\n\n  let PLAID_OPTIONS = null;\n\n  export default {\n    name: \"profile\",\n    mounted() {\n      if(this.$store.state.profile.username === \"\")\n        this.$router.push({ path: \"/\" });\n      fetch(\"http://127.0.0.1:8080/bank\", httpGetOptions())\n              .then(res => res.json())\n              .then(response => {\n                PLAID_OPTIONS = response;\n                var self = this;\n                (function($) {\n                  var products = response.PLAID_PRODUCTS.split(',');\n                  if (products.includes('assets')) {\n                    $('#assets').show();\n                  }\n\n                  var handler = Plaid.create({\n                    apiVersion: 'v2',\n                    clientName: 'Plaid Quickstart',\n                    env: response.PLAID_ENV,\n                    product: products,\n                    key: response.PLAID_PUBLIC_KEY,\n                    countryCodes: response.PLAID_COUNTRY_CODES.split(','),\n                    // webhook: 'https://your-domain.tld/plaid-webhook',\n                    onSuccess: (public_token, metadata) => {\n                      var model = {\n                        public_token: public_token\n                      };\n                      fetch(\"http://127.0.0.1:8080/bank/token/get_access_token\", httpPostOptions(model))\n                              .then(res => res.json())\n                              .then(data => {\n                                var accountModel = {\n                                  user_id: self.$store.state.profile.user_id,\n                                  access_token: data.access_token,\n                                  item_id: data.item_id,\n                                  primary_key: self.$store.state.profile.username + \"---\" + metadata.institution.name\n                                };\n                                fetch(\"http://127.0.0.1:8080/bank/new\", httpPostOptions(accountModel));\n                                self.$store.dispatch(\"AddBankConnectionAction\", accountModel)\n                                self.getTransactions(data.access_token);\n                              });\n                    },\n                  });\n\n                  var accessToken = qs('access_token');\n                  if (accessToken != null && accessToken != '') {\n                    var model = {\n                      access_token: accessToken\n                    };\n                    fetch(\"http://127.0.0.1:8080/bank/token/set_access_token\", httpPostOptions(model))\n                            .then(res => res.json())\n                            .then(function(data) {\n                              $('#container').fadeOut('fast', function() {\n                                $('#item_id').text(data.item_id);\n                                $('#access_token').text(accessToken);\n                                $('#intro').hide();\n                                $('#app, #steps').fadeIn('slow');\n                              });\n                            });\n                  }\n\n                  $('#link-btn').on('click', function(e) {\n                    handler.open();\n                  });\n                })(jQuery);\n              });\n    },\n    data() {\n      return {\n        ProfileModel: {\n          username: this.$store.state.profile.username,\n          email: this.$store.state.profile.email,\n          password: this.$store.state.profile.password,\n          phoneNumber: this.$store.state.profile.phoneNumber\n        },\n        BankConnectionModel: {\n          selected: ''\n        }\n      };\n    },\n    methods: {\n      update() {\n        if(this.ProfileModel.username !== \"\" && this.ProfileModel.email.match(\"@\") && this.ProfileModel.password.trim().length >= 6) {\n          if(this.ProfileModel.phoneNumber !== \"\" && this.ProfileModel.phoneNumber.trim().length !== 10) {\n            this.ProfileModel.phoneNumber = \"\";\n          }\n          const model = {\n            user_id: this.$store.state.profile.user_id,\n            username: this.ProfileModel.username,\n            email: this.ProfileModel.email,\n            password: MD5(this.ProfileModel.password).toString(),\n            phoneNumber: this.ProfileModel.phoneNumber\n          };\n          fetch(\"http://127.0.0.1:8080/users/update/\" + this.$store.state.profile.user_id, httpPostOptions(model))\n                  .then(res => res.json())\n                  .then(response => {\n                    this.updateProfile(model)\n                    alert(\"Successfully updated profile!\")\n                  }).catch(error => {\n            alert(\"The username or email has been taken.\")\n          });\n\n        }\n      },\n      updateProfile(model) {\n        this.$store.dispatch('updateProfileAction', model);\n      },\n      getTransactions(access_token) {\n        fetch(\"http://127.0.0.1:8080/bank\" + this.$store.state.profile.user_id + \"/transactions/\" + access_token, httpGetOptions())\n                .then(res => res.json())\n                .then(data => {\n                  data.transactions.forEach(t => {\n                    const model = {\n                      id: -1,\n                      username: this.$store.state.profile.username,\n                      transaction_date: t.date,\n                      category: t.category,\n                      payee: t.payee,\n                      amount: Number(t.amount),\n                      memo: '',\n                      account: t.account\n                    };\n                    this.$store.dispatch(\"addTransactionAction\", model);\n                  });\n                });\n      },\n      setSelected(connection) {\n        this.BankConnectionModel.selected = connection;\n        console.log(connection)\n      },\n      unlink() {\n        console.log(this.BankConnectionModel.selected)\n      }\n    }\n  };\n\n  function qs(key) {\n    key = key.replace(/[*+?^$.\\[\\]{}()|\\\\\\/]/g, \"\\\\$&\"); // escape RegEx meta chars\n    var match = location.search.match(new RegExp(\"[?&]\" + key + \"=([^&]+)(&|$)\"));\n    return match && decodeURIComponent(match[1].replace(/\\+/g, \" \"));\n  }\n</script>\n\n<style scoped>\n  main {\n    background-color: #F7F7FC;\n    display: grid;\n    height: 100vh;\n    align-content: center;\n    align-items: center;\n    padding: 0 15%;\n  }\n  h2 {\n    font-size: 2em;\n    margin-top: 0;\n    margin-bottom: 1em;\n  }\n  #grid {\n    display: grid;\n    grid-template-columns: 3em auto;\n    grid-template-rows: repeat(4, 3em);\n    grid-column-gap: 1em;\n  }\n  i {\n    font-size: 2em;\n    text-align: center;\n  }\n  #signupButton {\n    margin-left: 1%;\n  }\n  .container-1 {\n    display: grid;\n    align-items: center;\n    align-content: center;\n  }\n  #container-2 {\n    background-color: white;\n    padding: 4em;\n    border-radius: 2em;\n    box-shadow: -5px 29px 162px -54px grey;\n  }\n  input {\n    margin-bottom: 1em;\n  }\n  @media only screen and (max-width: 1100px) {\n    main{\n      height: 85vh;\n      border-radius: 1em;\n      margin: 0 5vw;\n      background-color: transparent;\n    }\n  }\n</style>\n"],"sourceRoot":"src/components"}]}