{"remainingRequest":"/Users/timothyqin/ONE/hackathon/node_modules/babel-loader/lib/index.js!/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/timothyqin/ONE/hackathon/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/timothyqin/ONE/hackathon/src/components/LineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/timothyqin/ONE/hackathon/src/components/LineChart.vue","mtime":1560400268053},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _parseFloat from \"/Users/timothyqin/ONE/hackathon/node_modules/@babel/runtime-corejs2/core-js/parse-float\";\nimport \"core-js/modules/es6.array.sort\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport LineChart from \"../LineChart.js\";\nexport default {\n  name: \"line\",\n  components: {\n    LineChart: LineChart\n  },\n  mounted: function mounted() {\n    if (this.$store.state.username === \"\") this.$router.push({\n      path: \"/\"\n    });\n  },\n  data: function data() {\n    return {\n      user: null,\n      chartOptions: {\n        scales: {\n          xAxes: [{\n            type: 'time',\n            distribution: 'linear',\n            time: {\n              format: \"YYYY-MM-DD\",\n              unit: 'day',\n              min: this.getFirstDay(),\n              max: this.getLastDay()\n            }\n          }]\n        },\n        maintainAspectRatio: false\n      }\n    };\n  },\n  methods: {\n    getFirstDay: function getFirstDay() {\n      var date = new Date();\n      var firstDay = new Date(date.getFullYear(), date.getMonth(), 1).getTime();\n      return firstDay;\n    },\n    getLastDay: function getLastDay() {\n      var date = new Date();\n      var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getTime();\n      return lastDay;\n    }\n  },\n  computed: {\n    datacollection: function datacollection() {\n      if (this.$store.username === \"\") {\n        return null;\n      } else {\n        return {\n          // labels: this.getDaysOfMonth,\n          datasets: [{\n            label: \"Earnings\",\n            data: this.earnings,\n            fill: false,\n            borderColor: \"#53f442\" // backgroundColor: \"#53f442\"\n\n          }, {\n            label: \"Spendings\",\n            data: this.spendings,\n            fill: false,\n            borderColor: \"#e82929\" // backgroundColor: \"#e82929\"\n\n          }, {\n            label: \"Balance\",\n            data: this.balance,\n            fill: false,\n            borderColor: \"#000000\" // backgroundColor: \"#e82929\"\n\n          }]\n        };\n      }\n    },\n    earnings: function earnings() {\n      var earnings = [];\n      var sorted = this.$store.state.transactions;\n\n      for (var i = 0; i < sorted.length; i++) {\n        if (sorted[i].amount > 0) {\n          earnings.push({\n            x: sorted[i].transaction_date,\n            y: sorted[i].amount\n          });\n        }\n      }\n\n      earnings.sort(function (a, b) {\n        return new Date(a.x).getTime() - new Date(b.x).getTime();\n      });\n      return earnings;\n    },\n    spendings: function spendings() {\n      var spendings = [];\n      var sorted = this.$store.state.transactions;\n\n      for (var i = 0; i < sorted.length; i++) {\n        if (sorted[i].amount < 0) {\n          spendings.push({\n            x: sorted[i].transaction_date,\n            y: Math.abs(sorted[i].amount)\n          });\n        }\n      }\n\n      spendings.sort(function (a, b) {\n        return new Date(a.x).getTime() - new Date(b.x).getTime();\n      });\n      return spendings;\n    },\n    balance: function balance() {\n      var balance = [];\n      var sorted = this.$store.state.transactions;\n      var sum = 0;\n\n      for (var i = 0; i < sorted.length; i++) {\n        sum += _parseFloat(sorted[i].amount);\n        balance.push({\n          x: sorted[i].transaction_date,\n          y: sum\n        });\n      }\n\n      balance.sort(function (a, b) {\n        return new Date(a.x).getTime() - new Date(b.x).getTime();\n      });\n      return balance;\n    }\n  }\n};",{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container-1\">\n    <main>\n      <div id=\"container-2\">\n        <h2>This Month</h2>\n        <div class=\"chart\">\n          <line-chart :width=\"400\" :height=\"350\" id=\"myChart\" :chart-data=\"datacollection\" :options=\"chartOptions\"></line-chart>\n        </div>\n      </div>\n    </main>\n  </div>\n</template>\n\n<script>\n    import LineChart from \"../LineChart.js\";\n\n    export default {\n        name: \"line\",\n        components: {\n            LineChart\n        },\n        mounted() {\n          if(this.$store.state.username === \"\")\n            this.$router.push({ path: \"/\" });\n        },\n        data() {\n            return {\n                user: null,\n                chartOptions: {\n                    scales: {\n                        xAxes: [{\n                            type: 'time',\n                            distribution: 'linear',\n                            time: {\n                                format: \"YYYY-MM-DD\",\n                                unit: 'day',\n                                min: this.getFirstDay(),\n                                max: this.getLastDay()\n                            }\n                        }]\n                    },\n                    maintainAspectRatio:false\n                }\n            };\n        },\n        methods: {\n            getFirstDay() {\n                var date = new Date();\n                var firstDay = new Date(date.getFullYear(), date.getMonth(), 1).getTime();\n                return firstDay;\n            },\n            getLastDay() {\n                var date = new Date();\n                var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getTime();\n                return lastDay;\n            }\n        },\n        computed: {\n          datacollection: function() {\n            if (this.$store.username === \"\") {\n              return null;\n            } else {\n              return {\n                // labels: this.getDaysOfMonth,\n                datasets: [\n                  {\n                    label: \"Earnings\",\n                    data: this.earnings,\n                    fill: false,\n                    borderColor: \"#53f442\"\n                    // backgroundColor: \"#53f442\"\n                  },\n                  {\n                    label: \"Spendings\",\n                    data: this.spendings,\n                    fill: false,\n                    borderColor: \"#e82929\"\n                    // backgroundColor: \"#e82929\"\n                  },\n                  {\n                    label: \"Balance\",\n                    data: this.balance,\n                    fill: false,\n                    borderColor: \"#000000\"\n                    // backgroundColor: \"#e82929\"\n                  }\n                ]\n              };\n            }\n          },\n          earnings: function() {\n            let earnings = [];\n            let sorted = this.$store.state.transactions\n            for (let i = 0; i < sorted.length; i++) {\n              if (sorted[i].amount > 0) {\n                earnings.push({\n                  x: sorted[i].transaction_date,\n                  y: sorted[i].amount\n                });\n              }\n            }\n            earnings.sort((a, b) => new Date(a.x).getTime() - new Date(b.x).getTime());\n            return earnings;\n          },\n          spendings: function() {\n            let spendings = [];\n            let sorted = this.$store.state.transactions\n            for (let i = 0; i < sorted.length; i++) {\n              if (sorted[i].amount < 0) {\n                spendings.push({\n                  x: sorted[i].transaction_date,\n                  y: Math.abs(sorted[i].amount)\n                });\n              }\n            }\n            spendings.sort((a, b) => new Date(a.x).getTime() - new Date(b.x).getTime());\n            return spendings;\n          },\n          balance: function() {\n            let balance = [];\n            let sorted = this.$store.state.transactions\n            let sum = 0;\n            for (let i = 0; i < sorted.length; i++) {\n              sum += parseFloat(sorted[i].amount);\n              balance.push({\n                x: sorted[i].transaction_date,\n                y: sum\n              });\n            }\n            balance.sort((a, b) => new Date(a.x).getTime() - new Date(b.x).getTime());\n            return balance;\n          }\n        }\n    };\n</script>\n\n<style scoped>\n  main {\n    background-color: #f7f7fc;\n    display: grid;\n    height: 100vh;\n    align-content: center;\n    align-items: center;\n    padding: 0 15%;\n  }\n  h2 {\n    font-size: 2em;\n    margin-top: 0;\n    margin-bottom: 1em;\n  }\n  #signupButton {\n    margin-left: 1%;\n  }\n  .container-1 {\n    display: grid;\n    align-items: center;\n    align-content: center;\n  }\n  #container-2 {\n    background-color: white;\n    height: 85vh;\n    padding: 4em;\n    border-radius: 2em;\n    box-shadow: -5px 29px 162px -54px grey;\n  }\n  @media only screen and (max-width: 1100px) {\n    main {\n      height: 85vh;\n      border-radius: 1em;\n      padding: 0 5%;\n      margin: 0 5vw;\n      background-color: transparent;\n    }\n  }\n</style>"],"sourceRoot":"src/components"}]}