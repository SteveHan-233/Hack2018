{"remainingRequest":"/Users/timothyqin/ONE/hackathon/node_modules/babel-loader/lib/index.js!/Users/timothyqin/ONE/hackathon/node_modules/eslint-loader/index.js??ref--13-0!/Users/timothyqin/ONE/hackathon/src/store/store.js","dependencies":[{"path":"/Users/timothyqin/ONE/hackathon/src/store/store.js","mtime":1565008995493},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.promise.finally\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport { isEquivalent } from \"../lib/lib\";\nVue.use(Vuex);\nvar state = {\n  profile: {\n    user_id: -1,\n    username: '',\n    email: '',\n    password: '',\n    phoneNumber: ''\n  },\n  transactions: []\n};\nvar getters = {\n  getCurrentUser: function getCurrentUser(state) {\n    return state.profile.username;\n  }\n};\nvar mutations = {\n  setCurrentUserMutations: function setCurrentUserMutations(state, nextUsername) {\n    state.profile.username = nextUsername;\n  },\n  updateProfileMutation: function updateProfileMutation(state, model) {\n    state.profile = model;\n  },\n  clearCurrentStoredTransactionsMutation: function clearCurrentStoredTransactionsMutation(state) {\n    state.transactions = [];\n  },\n  addTransactionMutation: function addTransactionMutation(state, transaction) {\n    state.transactions.push(transaction);\n    state.transactions.sort(function (a, b) {\n      return new Date(b.transaction_date).getTime() - new Date(a.transaction_date).getTime();\n    });\n  },\n  editTransactionMutation: function editTransactionMutation(state, transaction) {\n    for (var i = 0; i < state.transactions.length; i++) {\n      if (state.transactions[i].transaction_id === transaction.transaction_id) {\n        state.transactions[i].transaction_date = transaction.transaction_date;\n        state.transactions[i].category = transaction.category;\n        state.transactions[i].account = transaction.account;\n        state.transactions[i].payee = transaction.payee;\n        state.transactions[i].amount = transaction.amount;\n        state.transactions[i].memo = transaction.memo;\n      }\n    }\n\n    state.transactions.sort(function (a, b) {\n      return new Date(b.transaction_date).getTime() - new Date(a.transaction_date).getTime();\n    });\n  },\n  removeTransactionMutation: function removeTransactionMutation(state, transaction) {\n    var index = 0;\n\n    while (!isEquivalent(state.transactions[index], transaction)) {\n      index++;\n    }\n\n    state.transactions.splice(index, 1);\n  }\n};\nvar actions = {\n  setCurrentUserAction: function setCurrentUserAction(context, username) {\n    context.commit('setCurrentUserMutations', username);\n  },\n  updateProfileAction: function updateProfileAction(context, model) {\n    context.commit('updateProfileMutation', model);\n  },\n  clearCurrentStoredTransactionsAction: function clearCurrentStoredTransactionsAction(context) {\n    context.commit(\"clearCurrentStoredTransactionsMutation\");\n  },\n  addTransactionAction: function addTransactionAction(context, transaction) {\n    context.commit('addTransactionMutation', transaction);\n  },\n  editTransactionAction: function editTransactionAction(context, transaction) {\n    context.commit('editTransactionMutation', transaction);\n  },\n  removeTransactionAction: function removeTransactionAction(context, transaction) {\n    context.commit('removeTransactionMutation', transaction);\n  }\n};\nexport default new Vuex.Store({\n  strict: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n});",{"version":3,"sources":["/Users/timothyqin/ONE/hackathon/src/store/store.js"],"names":["Vue","Vuex","isEquivalent","use","state","profile","user_id","username","email","password","phoneNumber","transactions","getters","getCurrentUser","mutations","setCurrentUserMutations","nextUsername","updateProfileMutation","model","clearCurrentStoredTransactionsMutation","addTransactionMutation","transaction","push","sort","a","b","Date","transaction_date","getTime","editTransactionMutation","i","length","transaction_id","category","account","payee","amount","memo","removeTransactionMutation","index","splice","actions","setCurrentUserAction","context","commit","updateProfileAction","clearCurrentStoredTransactionsAction","addTransactionAction","editTransactionAction","removeTransactionAction","Store","strict"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport { isEquivalent } from \"../lib/lib\";\n\nVue.use(Vuex);\n\nconst state = {\n    profile: {\n        user_id: -1,\n        username: '',\n        email: '',\n        password: '',\n        phoneNumber: '',\n    },\n    transactions: []\n}\n\nconst getters = {\n    getCurrentUser: function(state) {\n        return state.profile.username;\n    }\n}\n\nconst mutations = {\n    setCurrentUserMutations: function(state, nextUsername) {\n        state.profile.username = nextUsername;\n    },\n    updateProfileMutation: function(state, model) {\n        state.profile = model;\n    },\n    clearCurrentStoredTransactionsMutation: function(state) {\n        state.transactions = []\n    },\n    addTransactionMutation: function(state, transaction) {\n        state.transactions.push(transaction);\n        state.transactions.sort((a, b) => new Date(b.transaction_date).getTime() - new Date(a.transaction_date).getTime());\n    },\n    editTransactionMutation: function(state, transaction) {\n        for(let i = 0; i < state.transactions.length; i++) {\n            if(state.transactions[i].transaction_id === transaction.transaction_id) {\n                state.transactions[i].transaction_date = transaction.transaction_date;\n                state.transactions[i].category = transaction.category;\n                state.transactions[i].account = transaction.account;\n                state.transactions[i].payee = transaction.payee;\n                state.transactions[i].amount = transaction.amount;\n                state.transactions[i].memo = transaction.memo;\n            }\n        }\n        state.transactions.sort((a, b) => new Date(b.transaction_date).getTime() - new Date(a.transaction_date).getTime());\n    },\n    removeTransactionMutation: function(state, transaction) {\n        var index = 0;\n        while(!isEquivalent(state.transactions[index], transaction)) index++;\n        state.transactions.splice(index, 1);\n    }\n}\n\nconst actions = {\n    setCurrentUserAction: function(context, username) {\n        context.commit('setCurrentUserMutations', username);\n    },\n    updateProfileAction: function(context, model) {\n        context.commit('updateProfileMutation', model);\n    },\n    clearCurrentStoredTransactionsAction: function(context) {\n        context.commit(\"clearCurrentStoredTransactionsMutation\");\n    },\n    addTransactionAction: function(context, transaction) {\n        context.commit('addTransactionMutation', transaction);\n    },\n    editTransactionAction: function(context, transaction) {\n        context.commit('editTransactionMutation', transaction);\n    },\n    removeTransactionAction: function(context, transaction) {\n        context.commit('removeTransactionMutation', transaction);\n    }\n}\n\nexport default new Vuex.Store({\n  strict: true,\n    state,\n    getters,\n    mutations,\n    actions\n});\n"]}]}