{"remainingRequest":"/Users/timothyqin/ONE/hackathon/node_modules/babel-loader/lib/index.js!/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/timothyqin/ONE/hackathon/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/timothyqin/ONE/hackathon/src/components/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/timothyqin/ONE/hackathon/src/components/Login.vue","mtime":1565624810217},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/timothyqin/ONE/hackathon/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { httpGetOptions } from \"../lib/http\";\nimport MD5 from \"crypto-js/md5\";\nimport Profile from \"./Profile\";\nexport default {\n  name: 'login',\n  data: function data() {\n    return {\n      LoginModel: {\n        username: '',\n        password: ''\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.resetCurrentUser(\"\");\n  },\n  computed: {\n    getCurrentUser: function getCurrentUser() {\n      return this.$store.state.profile.username;\n    }\n  },\n  methods: {\n    login: function login() {\n      var _this = this;\n\n      var username = this.LoginModel.username;\n      var password = MD5(this.LoginModel.password).toString();\n      fetch(\"http://127.0.0.1:8080/users/login/\" + username + \"/\" + password, httpGetOptions()).then(function (res) {\n        return res.json();\n      }).then(function (response) {\n        if (!response) alert(\"Wrong username or password!\");else {\n          _this.resetCurrentUser(username.trim());\n\n          fetch(\"http://127.0.0.1:8080/users/\" + _this.$store.state.profile.username, httpGetOptions()).then(function (res) {\n            return res.json();\n          }).then(function (response) {\n            var user = response;\n\n            _this.$store.dispatch(\"updateProfileAction\", user);\n\n            fetch(\"http://127.0.0.1:8080/transactions/\" + _this.$store.state.profile.user_id, httpGetOptions()).then(function (res) {\n              return res.json();\n            }).then(function (response) {\n              _this.$store.dispatch(\"clearCurrentStoredTransactionsAction\");\n\n              var transactions = response.transactions;\n\n              for (var i = 0; i < transactions.length; i++) {\n                _this.$store.dispatch(\"addTransactionAction\", transactions[i]);\n              }\n            }).catch(function (error) {\n              return console.error(\"Error:\", error);\n            });\n            fetch(\"http://127.0.0.1:8080/bank/\" + _this.$store.state.profile.user_id, httpGetOptions()).then(function (res) {\n              return res.json();\n            }).then(function (response) {\n              var banks = response['banks'];\n              var numBanks = banks.length;\n\n              for (var i = 0; i < numBanks; i++) {\n                _this.$store.dispatch(\"addBankConnectionAction\", banks[i]);\n\n                _this.getTransactions(banks[i].access_token);\n              }\n            }).catch(function (error) {\n              return console.error('Error:', error);\n            });\n          }).catch(function (error) {\n            return console.error(\"Error:\", error);\n          });\n\n          _this.$router.push({\n            path: '/dashboard'\n          });\n        }\n      }).catch(function (error) {\n        return console.error('Error:', error);\n      });\n    },\n    signup: function signup() {\n      this.$router.push({\n        path: '/signup'\n      });\n    },\n    resetCurrentUser: function resetCurrentUser(username) {\n      this.$store.dispatch('setCurrentUserAction', username);\n      this.$store.dispatch('clearCurrentStoredTransactionsAction');\n    },\n    getTransactions: function getTransactions(access_token) {\n      var _this2 = this;\n\n      fetch(\"http://127.0.0.1:8080/bank/\" + this.$store.state.profile.user_id + \"/transactions/\" + access_token, httpGetOptions()).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        data.transactions.forEach(function (t) {\n          var model = {\n            id: -1,\n            username: _this2.$store.state.profile.username,\n            transaction_date: t.date,\n            category: t.category,\n            payee: t.payee,\n            amount: Number(t.amount),\n            memo: '',\n            account: t.account\n          };\n\n          _this2.$store.dispatch(\"addTransactionAction\", model);\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["Login.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"container-1\">\n        <main>\n            <div id=\"container-2\">\n                <h2>Login</h2>\n                <div id=\"grid\">\n                    <i class=\"fa fa-user\" aria-hidden=\"true\"></i>\n                    <input type=\"text\" class=\"form-control margin-bottom\" placeholder=\"Username\" v-model=LoginModel.username>\n                    <i class=\"fa fa-lock\" aria-hidden=\"true\"></i>\n                    <input type=\"password\" class=\"form-control margin-bottom\" placeholder=\"Password\" @keyup.enter=\"login()\" v-model=LoginModel.password>\n                </div>\n                <button id=\"loginButton\" class=\"btn btn-md btn-success float-center\" @click=\"login()\">\n                    Submit\n                </button>\n                <button id=\"signupButton\" class=\"btn btn-md btn-primary float-center\" @click=\"signup()\">\n                    SignUp\n                </button>\n            </div>\n        </main>\n    </div>\n</template>\n\n<script>\n    import {httpGetOptions} from \"../lib/http\";\n    import MD5 from \"crypto-js/md5\";\n    import Profile from \"./Profile\";\n\n\n    export default {\n        name: 'login',\n        data() {\n            return {\n                LoginModel: {\n                    username: '',\n                    password: ''\n                }\n            }\n        },\n        mounted() {\n            this.resetCurrentUser(\"\")\n        },\n        computed: {\n            getCurrentUser() {\n                return this.$store.state.profile.username;\n            }\n        },\n        methods: {\n            login() {\n                var username = this.LoginModel.username;\n                var password = MD5(this.LoginModel.password).toString();\n                fetch(\"http://127.0.0.1:8080/users/login/\" + username + \"/\" + password, httpGetOptions())\n                    .then(res => res.json())\n                    .then(response => {\n                        if(!response)\n                            alert(\"Wrong username or password!\");\n                        else {\n                            this.resetCurrentUser(username.trim());\n                            fetch(\"http://127.0.0.1:8080/users/\" + this.$store.state.profile.username, httpGetOptions())\n                                .then(res => res.json())\n                                .then(response => {\n                                    let user = response;\n                                    this.$store.dispatch(\"updateProfileAction\", user);\n                                    fetch(\n                                        \"http://127.0.0.1:8080/transactions/\" + this.$store.state.profile.user_id,\n                                        httpGetOptions()\n                                    )\n                                        .then(res => res.json())\n                                        .then(response => {\n                                            this.$store.dispatch(\"clearCurrentStoredTransactionsAction\");\n                                            let transactions = response.transactions;\n                                            for (let i = 0; i < transactions.length; i++) {\n                                                this.$store.dispatch(\"addTransactionAction\", transactions[i]);\n                                            }\n                                        })\n                                        .catch(error => console.error(\"Error:\", error));\n                                    fetch(\"http://127.0.0.1:8080/bank/\" + this.$store.state.profile.user_id, httpGetOptions())\n                                        .then(res => res.json())\n                                        .then(response => {\n                                            let banks = response['banks'];\n                                            let numBanks = banks.length;\n                                            for(let i = 0; i < numBanks; i++) {\n                                                this.$store.dispatch(\"addBankConnectionAction\", banks[i]);\n                                                this.getTransactions(banks[i].access_token)\n                                            }\n                                        })\n                                        .catch(error => console.error('Error:', error));\n                                })\n                                .catch(error => console.error(\"Error:\", error));\n                            this.$router.push({path: '/dashboard'})\n                        }\n                    })\n                    .catch(error => console.error('Error:', error));\n            },\n            signup() {\n                this.$router.push({path: '/signup'});\n            },\n            resetCurrentUser(username) {\n                this.$store.dispatch('setCurrentUserAction', username);\n                this.$store.dispatch('clearCurrentStoredTransactionsAction');\n            },\n            getTransactions(access_token) {\n                fetch(\"http://127.0.0.1:8080/bank/\" + this.$store.state.profile.user_id + \"/transactions/\" + access_token, httpGetOptions())\n                    .then(res => res.json())\n                    .then(data => {\n                        data.transactions.forEach(t => {\n                            const model = {\n                                id: -1,\n                                username: this.$store.state.profile.username,\n                                transaction_date: t.date,\n                                category: t.category,\n                                payee: t.payee,\n                                amount: Number(t.amount),\n                                memo: '',\n                                account: t.account\n                            };\n                            this.$store.dispatch(\"addTransactionAction\", model);\n                        });\n                    });\n            }\n        }\n    };\n</script>\n\n<style scoped>\n    main {\n        background-color: #F7F7FC;\n        display: grid;\n        height: 100vh;\n        align-content: center;\n        align-items: center;\n        padding: 0 15%;\n    }\n    h2 {\n        font-size: 2em;\n        margin-top: 0;\n        margin-bottom: 1em;\n    }\n    #grid {\n        display: grid;\n        grid-template-columns: 3em auto;\n        grid-template-rows: repeat(2, 3em);\n        grid-column-gap: 1em;\n    }\n    i {\n        font-size: 2em;\n        text-align: center;\n    }\n    #signupButton {\n        margin-left: 1%;\n    }\n    .container-1 {\n        display: grid;\n        align-items: center;\n        align-content: center;\n    }\n    #container-2 {\n        background-color: white;\n        padding: 4em;\n        border-radius: 2em;\n        box-shadow: -5px 29px 162px -54px grey;\n\n    }\n    @media only screen and (max-width: 1100px) {\n        main{\n            height: 85vh;\n            border-radius: 1em;\n            margin: 0 5vw;\n            background-color: transparent;\n        }\n    }\n</style>\n"],"sourceRoot":"src/components"}]}